<?php

namespace Acted\LegalDocsBundle\Repository;

use Doctrine\Common\Collections\Criteria;


/**
 * PackageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PackageRepository extends \Doctrine\ORM\EntityRepository
{
    public function removePackages($ids)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $date = date("Y-m-d H:i:s");
        $params = array('deletedTime' => $date, 'packageIds' => $ids);
        $whereCriteria = 'pac.deletedTime IS NULL AND pac.id IN (:packageIds)';

        $qb->update('ActedLegalDocsBundle:Package', 'pac')
            ->set('pac.deletedTime', ':deletedTime')
            ->where($whereCriteria)
            ->setParameters($params);

        $qb->getQuery()->execute();
    }

    public function getPackageIdsByServiceId($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('serviceId' => $id);
        $whereCriteria = 'pac.service = :serviceId';
        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac.id');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        //return $qb->getQuery()->getSingleResult();
        //\Doctrine\Common\Util\Debug::dump($qb->getQuery()->getSql());exit;

        $packageIds = $qb->getQuery()->getResult();
        foreach($packageIds as $key => $value) {
            $packageIds[$key] = $value['id'];
        }
//        \Doctrine\Common\Util\Debug::dump($packageIds);exit;

        return $packageIds;
    }

    public function getPackagesByServiceId($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('serviceId' => $id);

        $whereCriteria = '(pac.deletedTime IS NULL) AND pac.service = :serviceId';

        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        return $qb->getQuery()->getResult();
    }

}
