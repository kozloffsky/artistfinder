<?php

namespace Acted\LegalDocsBundle\Repository;

use Doctrine\Common\Collections\Criteria;


/**
 * PackageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PackageRepository extends \Doctrine\ORM\EntityRepository
{
    public function removePackages($ids)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $date = date("Y-m-d H:i:s");
        $params = array('deletedTime' => $date, 'packageIds' => $ids);
        $whereCriteria = 'pac.deletedTime IS NULL AND pac.id IN (:packageIds)';

        $qb->update('ActedLegalDocsBundle:Package', 'pac')
            ->set('pac.deletedTime', ':deletedTime')
            ->where($whereCriteria)
            ->setParameters($params);

        $qb->getQuery()->execute();
    }

    public function getPackageIdsByServiceId($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('serviceId' => $id);
        $whereCriteria = 'pac.service = :serviceId';
        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac.id');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        $packageIds = $qb->getQuery()->getResult();
        foreach($packageIds as $key => $value) {
            $packageIds[$key] = $value['id'];
        }

        return $packageIds;
    }

    public function getPackagesByServiceId($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('serviceId' => $id);

        $whereCriteria = '(pac.deletedTime IS NULL) AND pac.service = :serviceId';

        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        return $qb->getQuery()->getResult();
    }

    public function getPackageIdsByPerformanceId($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('performanceId' => $id);
        $whereCriteria = 'pac.performance = :performanceId';
        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac.id');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        $packageIds = $qb->getQuery()->getResult();
        foreach($packageIds as $key => $value) {
            $packageIds[$key] = $value['id'];
        }

        return $packageIds;
    }

    public function getPackagesByPerformanceId($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('performanceId' => $id);

        $whereCriteria = '(pac.deletedTime IS NULL) AND pac.performance = :performanceId';

        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        return $qb->getQuery()->getResult();
    }

    public function getPackageById($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('packageId' => $id);

        $whereCriteria = '(pac.deletedTime IS NULL) AND pac.id = :packageId';

        $qb->from('ActedLegalDocsBundle:Package', 'pac');
        $qb->select('pac');
        $qb->where($whereCriteria);
        $qb->setParameters($params);

        return $qb->getQuery()->getSingleResult();
    }

    public function getFullPackageById($id)
    {
        $whereCriteria = 'pac.id IN (:packageId) AND pac.deletedTime IS NULL';
        return $this->createQueryBuilder('pac')
            ->select('pac, opt, rate, price')
            ->leftJoin('pac.options', 'opt', 'WITH', 'opt.deletedTime IS NULL')
            ->leftJoin('opt.rates', 'rate', 'WITH', 'rate.deletedTime IS NULL')
            ->leftJoin('rate.price', 'price')
            ->where($whereCriteria)
            ->setParameter('packageId', $id)
            ->getQuery()->getArrayResult();
    }

    public function changePackageSelected($packageId)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $params = array('id' => $packageId);

        $whereCriteria = 'p.id = :id';

        $qb->update('ActedLegalDocsBundle:Package', 'p')
            ->set('p.isSelected', '1-p.isSelected')
            ->where($whereCriteria)
            ->setParameters($params);

        return $qb->getQuery()->execute();
    }
}
