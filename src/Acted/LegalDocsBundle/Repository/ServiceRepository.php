<?php

namespace Acted\LegalDocsBundle\Repository;
use Acted\LegalDocsBundle\Entity\Service;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get service by id
     * @param $id
     * @return Service
     */
    public function getServiceById($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $params = array('serviceId' => $id);

        $qb->from('ActedLegalDocsBundle:Service', 's');
        $qb->select('s');
        $qb->where($qb->expr()->eq('s.id', ':serviceId'));

        $qb->setParameters($params);

        return $qb->getQuery()->getSingleResult();
    }

    /**
     * Get services
     * @param $profileId
     * @return array
     */
    public function getServices($profileId)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $params = array('profileId' => $profileId);

        $qb->from('ActedLegalDocsBundle:Service', 's');
        $qb->select('s');
        $qb->where('s.deletedTime IS NULL AND s.profile = :profileId');
        $qb->setParameters($params);

        return $qb->getQuery()->getResult();
    }

    public function removeService($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $date = date("Y-m-d H:i:s");
        $params = array('deletedTime' => $date, 'serviceId' => $id);

        $whereCriteria = 's.deletedTime IS NULL AND s.id IN (:serviceId)';


        $qb->update('ActedLegalDocsBundle:Service', 's')
            ->set('s.deletedTime', ":deletedTime")
            ->where($whereCriteria)
            ->setParameters($params);

        $qb->getQuery()->execute();
    }

    public function getFullServiceById($id)
    {
        $whereCriteria = 's.deletedTime IS NULL AND s.id IN (:serviceId)';
        return $this->createQueryBuilder('s')
            ->select('s, pac, opt, rate, price')
            ->leftJoin('s.packages', 'pac', 'WITH', 'pac.deletedTime IS NULL')
            ->leftJoin('pac.options', 'opt', 'WITH', 'opt.deletedTime IS NULL')
            ->leftJoin('opt.rates', 'rate', 'WITH', 'rate.deletedTime IS NULL')
            ->leftJoin('rate.price', 'price')
            ->where($whereCriteria)
            ->setParameter('serviceId', $id)
            ->getQuery()->getArrayResult();
    }

    public function getServicesByProfileId($profileId)
    {
        $whereCriteria = 's.profile = :profileId AND s.deletedTime IS NULL AND s.isQuotation = :isQuotation';
        $params = array('profileId' => $profileId, 'isQuotation' => false);
        return $this->createQueryBuilder('s')
            ->select('s, pac, opt, rate, price')
            ->leftJoin('s.packages', 'pac', 'WITH', 'pac.deletedTime IS NULL')
            ->leftJoin('pac.options', 'opt', 'WITH', 'opt.deletedTime IS NULL')
            ->leftJoin('opt.rates', 'rate', 'WITH', 'rate.deletedTime IS NULL')
            ->leftJoin('rate.price', 'price')
            ->where($whereCriteria)
            ->setParameters($params)
            ->getQuery()->getArrayResult();
    }
}
