<?php

namespace Acted\LegalDocsBundle\Repository;

use Acted\LegalDocsBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
/**
 * ChatRoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChatRoomRepository extends EntityRepository
{
    /**
     * @param $event
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getChatByParams($event, $user)
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.user = :userId')
            ->andWhere('c.event = :eventId')
            ->setParameters([
                'userId' => $user->getId(),
                'eventId' => $event->getId()
            ])
            ->getQuery()->getOneOrNullResult();
    }

    /**
     * @param int $userId
     * @return array
     */
    public function getChatRoomByParams($userId)
    {
        $query = $this->createQueryBuilder('c')
            ->where('c.artist = :userId OR c.client = :userId')
            ->setParameter('userId', $userId)
            ;

        return $query->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @param int $chatId
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function checkUserPermission($user, $chatId)
    {
        $query = $this->createQueryBuilder('c')
            ->where('c.artist = :userId OR c.client = :userId')
            ->andWhere('c.id = :chatId')
            ->setParameters([
                'userId' => $user,
                'chatId' => $chatId
            ])
        ;

        return $query->getQuery()->getOneOrNullResult();
    }
}
